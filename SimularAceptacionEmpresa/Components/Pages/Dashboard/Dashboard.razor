@page "/dashboard"
@inject PreguntaService PreguntaService
@inject UsuarioService UsuarioService
@rendermode InteractiveServer

<PageTitle>Dashboard de Preguntas</PageTitle>

<div class="container mt-4">
    <h3 class="text-center mb-4">📊 Valoración Promedio por Pregunta</h3>

    @if (preguntasConPromedio == null || usuariosConPromedio == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p>Cargando datos...</p>
        </div>
    }
    else if (!preguntasConPromedio.Any())
    {
        <div class="alert alert-warning">No hay preguntas disponibles.</div>
    }
    else
    {
        <div class="row">
            @foreach (var pregunta in preguntasConPromedio)
            {
                <div class="col-md-6 mb-4">
                    <div class="card shadow-sm">
                        <div class="card-header bg-primary text-white">
                            <h5 class="card-title mb-0">@pregunta.Texto</h5>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <span class="fw-bold">Promedio:</span>
                                <span class="badge bg-info fs-6">@pregunta.PromedioValoracion.ToString("0.0")</span>
                            </div>
                            <div class="progress">
                                <div class="progress-bar bg-success"
                                     role="progressbar"
                                     style="width: @((pregunta.PromedioValoracion / 10) * 100)%"
                                     aria-valuenow="@pregunta.PromedioValoracion"
                                     aria-valuemin="0"
                                     aria-valuemax="10">
                                </div>
                            </div>
                            <small class="text-muted">Basado en @pregunta.TotalRespuestas respuestas.</small>
                        </div>
                    </div>
                </div>
            }
        </div>

        <h4 class="mt-5 mb-3 text-center">👤 Valoración Promedio por Usuario</h4>
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Nombre del Usuario</th>
                    <th class="text-center">Promedio</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var usuario in usuariosConPromedio)
                {
                    <tr>
                        <td>@usuario.Nombre</td>
                        <td class="text-center">@usuario.PromedioValoracion.ToString("0.0")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<PreguntaConPromedio>? preguntasConPromedio;
    private List<UsuarioConPromedio>? usuariosConPromedio;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosDashboard();
    }

    private async Task CargarDatosDashboard()
    {
        var preguntas = await PreguntaService.Listar(p => true);
        var usuarios = await UsuarioService.Listar(u => true);

        preguntasConPromedio = preguntas.Select(p => new PreguntaConPromedio
            {
                PreguntaId = p.PreguntaId,
                Texto = p.Texto,
                PromedioValoracion = CalcularPromedioPorPregunta(p.PreguntaId, usuarios),
                TotalRespuestas = CalcularTotalRespuestas(p.PreguntaId, usuarios)
            }).ToList();

        usuariosConPromedio = usuarios.Select(u => new UsuarioConPromedio
            {
                Nombre = u.Nombre,
                PromedioValoracion = CalcularPromedioPorUsuario(u)
            }).ToList();
    }

    private double CalcularPromedioPorPregunta(int preguntaId, List<Usuario> usuarios)
    {
        var valoraciones = usuarios
            .SelectMany(u => u.UsuariosDetalle)
            .Where(ud => ud.PreguntaId == preguntaId && ud.PreguntaDetalle != null)
            .Select(ud => ud.PreguntaDetalle.Valoracion)
            .ToList();

        return valoraciones.Any() ? valoraciones.Average() : 0;
    }

    private int CalcularTotalRespuestas(int preguntaId, List<Usuario> usuarios)
    {
        return usuarios
            .SelectMany(u => u.UsuariosDetalle)
            .Count(ud => ud.PreguntaId == preguntaId && ud.PreguntaDetalle != null);
    }

    private double CalcularPromedioPorUsuario(Usuario usuario)
    {
        var valoraciones = usuario.UsuariosDetalle
            .Where(ud => ud.PreguntaDetalle != null)
            .Select(ud => ud.PreguntaDetalle.Valoracion)
            .ToList();

        return valoraciones.Any() ? valoraciones.Average() : 0;
    }

    private class PreguntaConPromedio
    {
        public int PreguntaId { get; set; }
        public string Texto { get; set; } = "";
        public double PromedioValoracion { get; set; }
        public int TotalRespuestas { get; set; }
    }

    private class UsuarioConPromedio
    {
        public string Nombre { get; set; } = "";
        public double PromedioValoracion { get; set; }
    }
}
